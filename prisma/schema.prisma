generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ShotBoundarySource {
  PYSCENEDETECT
  MANUAL
}

model ShotBoundary {
  id              String              @id @default(dbgenerated("uuidv7()")) @db.Uuid

  stashappSceneId Int                 @map("stashapp_scene_id")

  startTime       Decimal             @map("start_time") @db.Decimal(8, 3)
  endTime         Decimal             @map("end_time") @db.Decimal(8, 3)

  source          ShotBoundarySource  @default(MANUAL)

  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")

  @@index([stashappSceneId, startTime])
  @@map("shot_boundaries")
}

model Marker {
  id                Int      @id @default(autoincrement())
  stashappMarkerId  Int?     @unique @map("stashapp_marker_id")
  stashappSceneId   Int      @map("stashapp_scene_id")
  seconds           Decimal  @db.Decimal(8, 3)
  endSeconds        Decimal? @map("end_seconds") @db.Decimal(8, 3)
  primaryTagId      Int?     @map("primary_tag_id")

  lastSyncedAt      DateTime? @map("last_synced_at")
  lastExportedAt    DateTime? @map("last_exported_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  additionalTags    MarkerAdditionalTag[]
  markerSlots       MarkerSlot[]
  derivations       MarkerDerivation[] @relation("source")
  derivedFrom       MarkerDerivation[] @relation("derived")

  @@index([stashappSceneId])
  @@index([stashappMarkerId])
  @@map("markers")
}

model MarkerAdditionalTag {
  id         Int      @id @default(autoincrement())
  markerId   Int      @map("marker_id")
  tagId      Int      @map("tag_id")

  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  marker     Marker   @relation(fields: [markerId], references: [id], onDelete: Cascade)

  @@unique([markerId, tagId])
  @@index([tagId])
  @@map("marker_additional_tags")
}

enum GenderHint {
  MALE
  FEMALE
  TRANSGENDER_MALE
  TRANSGENDER_FEMALE
}

model SlotDefinitionSet {
  id                                String           @id @default(dbgenerated("uuidv7()")) @db.Uuid
  stashappTagId                     Int              @unique @map("stashapp_tag_id")
  allowSamePerformerInMultipleSlots Boolean          @default(false) @map("allow_same_performer_in_multiple_slots")

  createdAt                         DateTime         @default(now()) @map("created_at")
  updatedAt                         DateTime         @updatedAt @map("updated_at")

  slotDefinitions                   SlotDefinition[]

  @@map("slot_definition_sets")
}

model SlotDefinition {
  id                   String                       @id @default(dbgenerated("uuidv7()")) @db.Uuid
  slotDefinitionSetId  String                       @map("slot_definition_set_id") @db.Uuid
  slotLabel            String?                      @map("slot_label")
  order                Int                          @default(0)

  createdAt            DateTime                     @default(now()) @map("created_at")
  updatedAt            DateTime                     @updatedAt @map("updated_at")

  slotDefinitionSet    SlotDefinitionSet            @relation(fields: [slotDefinitionSetId], references: [id], onDelete: Cascade)
  genderHints          SlotDefinitionGenderHint[]
  markerSlots          MarkerSlot[]

  @@index([slotDefinitionSetId])
  @@map("slot_definitions")
}

model SlotDefinitionGenderHint {
  slotDefinitionId String         @map("slot_definition_id") @db.Uuid
  genderHint       GenderHint     @map("gender_hint")

  slotDefinition   SlotDefinition @relation(fields: [slotDefinitionId], references: [id], onDelete: Cascade)

  @@id([slotDefinitionId, genderHint])
  @@map("slot_definition_gender_hints")
}

model MarkerSlot {
  id                   String   @id @default(dbgenerated("uuidv7()")) @db.Uuid
  markerId             Int      @map("marker_id")
  slotDefinitionId     String   @map("slot_definition_id") @db.Uuid
  stashappPerformerId  Int?     @map("stashapp_performer_id")

  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  marker               Marker         @relation(fields: [markerId], references: [id], onDelete: Cascade)
  slotDefinition       SlotDefinition @relation(fields: [slotDefinitionId], references: [id], onDelete: Cascade)

  @@index([markerId])
  @@index([slotDefinitionId])
  @@index([stashappPerformerId])
  @@map("marker_slots")
}

model CorrespondingTagMapping {
  id                     String   @id @default(dbgenerated("uuidv7()")) @db.Uuid
  sourceTagId            Int      @unique @map("source_tag_id")
  correspondingTagId     Int      @map("corresponding_tag_id")

  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  @@index([correspondingTagId])
  @@map("corresponding_tag_mappings")
}

model MarkerDerivation {
  id                String   @id @default(dbgenerated("uuidv7()")) @db.Uuid
  sourceMarkerId    Int      @map("source_marker_id")
  derivedMarkerId   Int      @map("derived_marker_id")
  ruleId            String   @map("rule_id")
  depth             Int      @default(0)

  createdAt         DateTime @default(now()) @map("created_at")

  sourceMarker      Marker   @relation("source", fields: [sourceMarkerId], references: [id], onDelete: Cascade)
  derivedMarker     Marker   @relation("derived", fields: [derivedMarkerId], references: [id], onDelete: Cascade)

  @@unique([sourceMarkerId, derivedMarkerId])
  @@index([derivedMarkerId])
  @@index([ruleId])
  @@index([depth])
  @@map("marker_derivations")
}

// === Stash Sync Tables ===
// WARNING: These tables are READ-ONLY caches of Stashapp data.
// They are populated via sync operations and should NEVER be modified manually.
// Stashapp is the single source of truth; local copies are refreshable at any time.

model StashPerformer {
  id              Int      @id
  name            String
  gender          String?
  imagePath       String?  @map("image_path")
  stashUpdatedAt  DateTime @map("stash_updated_at")
  syncedAt        DateTime @map("synced_at")

  scenes          StashScenePerformer[]

  @@index([name])
  @@index([stashUpdatedAt])
  @@map("stash_performers")
}

model StashTag {
  id              Int      @id
  name            String   @unique
  stashUpdatedAt  DateTime @map("stash_updated_at")
  syncedAt        DateTime @map("synced_at")

  parents         StashTagParent[] @relation("child")
  children        StashTagParent[] @relation("parent")
  scenes          StashSceneTag[]

  @@index([name])
  @@index([stashUpdatedAt])
  @@map("stash_tags")
}

model StashTagParent {
  childId   Int         @map("child_id")
  parentId  Int         @map("parent_id")
  syncedAt  DateTime    @map("synced_at")

  child     StashTag    @relation("child", fields: [childId], references: [id], onDelete: Cascade)
  parent    StashTag    @relation("parent", fields: [parentId], references: [id], onDelete: Cascade)

  @@id([childId, parentId])
  @@index([parentId])
  @@map("stash_tag_parents")
}

model StashScene {
  id              Int       @id
  title           String?
  date            DateTime? @db.Date
  details         String?   @db.Text
  filesize        BigInt?
  duration        Decimal?  @db.Decimal(10, 2)
  stashUpdatedAt  DateTime  @map("stash_updated_at")
  syncedAt        DateTime  @map("synced_at")

  performers      StashScenePerformer[]
  tags            StashSceneTag[]

  @@index([date])
  @@index([stashUpdatedAt])
  @@map("stash_scenes")
}

model StashScenePerformer {
  sceneId      Int      @map("scene_id")
  performerId  Int      @map("performer_id")
  syncedAt     DateTime @map("synced_at")

  scene        StashScene     @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  performer    StashPerformer @relation(fields: [performerId], references: [id], onDelete: Cascade)

  @@id([sceneId, performerId])
  @@index([performerId])
  @@map("stash_scene_performers")
}

model StashSceneTag {
  sceneId   Int      @map("scene_id")
  tagId     Int      @map("tag_id")
  syncedAt  DateTime @map("synced_at")

  scene     StashScene @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  tag       StashTag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([sceneId, tagId])
  @@index([tagId])
  @@map("stash_scene_tags")
}
