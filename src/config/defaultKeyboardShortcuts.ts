import { KeyboardShortcut } from "../types/keyboard";

export const defaultShortcuts: KeyboardShortcut[] = [
  // Marker Review
  {
    id: "marker.confirm",
    bindings: [{ key: "z" }],
    description: "Confirm/unconfirm current marker",
    category: "marker.review",
    action: { type: "redux", reduxAction: "confirmMarker" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.reject",
    bindings: [{ key: "x" }],
    description: "Reject/unreject current marker",
    category: "marker.review",
    action: { type: "redux", reduxAction: "rejectMarker" },
    enabled: true,
    editable: true,
  },
  {
    id: "system.deleteRejected",
    bindings: [{ key: "x", modifiers: { shift: true } }],
    description: "Delete all rejected markers",
    category: "marker.review",
    action: { type: "function", functionName: "handleDeleteRejectedMarkers" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.markIncorrect",
    bindings: [{ key: "c" }],
    description: "Mark/unmark marker as incorrect",
    category: "marker.review",
    action: { type: "function", functionName: "markIncorrect" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.openCollectionModal",
    bindings: [{ key: "c", modifiers: { shift: true } }],
    description: "Open collection modal for incorrect markers",
    category: "system",
    action: {
      type: "redux",
      reduxAction: "setCollectingModalOpen",
      params: true,
    },
    enabled: true,
    editable: true,
  },

  // Marker Creation
  {
    id: "marker.create",
    bindings: [{ key: "a" }],
    description: "Create regular marker",
    category: "marker.create",
    action: { type: "function", functionName: "createOrDuplicateMarker" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.createShotBoundary",
    bindings: [{ key: "a", modifiers: { shift: true } }],
    description: "Create shot boundary marker",
    category: "marker.create",
    action: { type: "function", functionName: "createShotBoundaryMarker" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.split",
    bindings: [{ key: "s" }],
    description: "Split current marker",
    category: "marker.create",
    action: { type: "function", functionName: "splitCurrentMarker" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.duplicate",
    bindings: [{ key: "d" }],
    description: "Duplicate current marker",
    category: "marker.create",
    action: { type: "function", functionName: "duplicateMarker" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.splitVideoCut",
    bindings: [{ key: "v" }],
    description: "Split video cut marker",
    category: "marker.create",
    action: { type: "function", functionName: "splitVideoCutMarker" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.removeShotBoundary",
    bindings: [{ key: "v", modifiers: { shift: true } }],
    description: "Remove shot boundary marker at playhead and merge with previous",
    category: "marker.create",
    action: { type: "function", functionName: "removeShotBoundaryMarker" },
    enabled: true,
    editable: true,
  },

  // Marker Editing
  {
    id: "marker.edit",
    bindings: [{ key: "q" }],
    description: "Change primary tag of selected marker",
    category: "marker.edit",
    action: { type: "function", functionName: "handleEditMarker" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.setStartTime",
    bindings: [{ key: "w" }],
    description: "Set marker start time to current video time",
    category: "marker.edit",
    action: { type: "function", functionName: "setMarkerStartTime" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.setEndTime",
    bindings: [{ key: "e" }],
    description: "Set marker end time to current video time",
    category: "marker.edit",
    action: { type: "function", functionName: "setMarkerEndTime" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.copyTimes",
    bindings: [{ key: "t" }],
    description: "Copy marker times",
    category: "marker.edit",
    action: { type: "function", functionName: "copyMarkerTimes" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.pasteTimes",
    bindings: [{ key: "t", modifiers: { shift: true } }],
    description: "Paste marker times",
    category: "marker.edit",
    action: { type: "function", functionName: "pasteMarkerTimes" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.copyForMerge",
    bindings: [{ key: "r" }],
    description: "Set target marker",
    category: "marker.edit",
    action: { type: "function", functionName: "copyMarkerForMerge" },
    enabled: true,
    editable: true,
  },
  {
    id: "marker.mergeProperties",
    bindings: [{ key: "r", modifiers: { shift: true } }],
    description: "Merge selected marker to target marker",
    category: "marker.edit",
    action: { type: "function", functionName: "mergeMarkerProperties" },
    enabled: true,
    editable: true,
  },

  // Navigation
  {
    id: "navigation.swimlaneUp",
    bindings: [{ key: "ArrowUp" }],
    description: "Navigate between swimlanes up",
    category: "navigation",
    action: {
      type: "function",
      functionName: "navigateBetweenSwimlanes",
      params: { direction: "up" },
    },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.swimlaneDown",
    bindings: [{ key: "ArrowDown" }],
    description: "Navigate between swimlanes down",
    category: "navigation",
    action: {
      type: "function",
      functionName: "navigateBetweenSwimlanes",
      params: { direction: "down" },
    },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.withinSwimlaneLeft",
    bindings: [{ key: "ArrowLeft" }],
    description: "Navigate within swimlane left",
    category: "navigation",
    action: {
      type: "function",
      functionName: "navigateWithinSwimlane",
      params: { direction: "left" },
    },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.withinSwimlaneRight",
    bindings: [{ key: "ArrowRight" }],
    description: "Navigate within swimlane right",
    category: "navigation",
    action: {
      type: "function",
      functionName: "navigateWithinSwimlane",
      params: { direction: "right" },
    },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.previousUnprocessedInSwimlane",
    bindings: [{ key: "n" }],
    description: "Find previous unprocessed marker in swimlane",
    category: "navigation",
    action: {
      type: "function",
      functionName: "findPreviousUnprocessedMarkerInSwimlane",
    },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.previousUnprocessedGlobal",
    bindings: [{ key: "n", modifiers: { shift: true } }],
    description: "Find previous unprocessed marker globally",
    category: "navigation",
    action: { type: "function", functionName: "findPreviousUnprocessedGlobal" },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.nextUnprocessedInSwimlane",
    bindings: [{ key: "m" }],
    description: "Find next unprocessed marker in swimlane",
    category: "navigation",
    action: {
      type: "function",
      functionName: "findNextUnprocessedMarkerInSwimlane",
    },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.nextUnprocessedGlobal",
    bindings: [{ key: "m", modifiers: { shift: true } }],
    description: "Find next unprocessed marker globally",
    category: "navigation",
    action: { type: "function", functionName: "findNextUnprocessedGlobal" },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.centerPlayhead",
    bindings: [{ key: "h" }],
    description: "Center timeline on playhead",
    category: "navigation",
    action: { type: "function", functionName: "centerPlayhead" },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.zoomIn",
    bindings: [{ key: "+" }, { key: "=" }],
    description: "Zoom in",
    category: "navigation",
    action: { type: "function", functionName: "zoomIn" },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.zoomOut",
    bindings: [{ key: "-" }, { key: "_" }],
    description: "Zoom out",
    category: "navigation",
    action: { type: "function", functionName: "zoomOut" },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.resetZoom",
    bindings: [{ key: "0" }],
    description: "Reset zoom",
    category: "navigation",
    action: { type: "function", functionName: "resetZoom" },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.nextMarkerAtPlayhead",
    bindings: [{ key: "Tab" }],
    description: "Select next marker at playhead (top-to-bottom)",
    category: "navigation",
    action: { type: "function", functionName: "findNextMarkerAtPlayhead" },
    enabled: true,
    editable: true,
  },
  {
    id: "navigation.previousMarkerAtPlayhead",
    bindings: [{ key: "Tab", modifiers: { shift: true } }],
    description: "Select previous marker at playhead (bottom-to-top)",
    category: "navigation",
    action: { type: "function", functionName: "findPreviousMarkerAtPlayhead" },
    enabled: true,
    editable: true,
  },

  // Video Playback
  {
    id: "video.playPause",
    bindings: [{ key: " " }, { key: "k" }],
    description: "Toggle play/pause video",
    category: "video.playback",
    action: { type: "redux", reduxAction: "togglePlayPause" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.seekSmallBackward",
    bindings: [{ key: "j" }],
    description: "Seek backward (small interval)",
    category: "video.playback",
    action: { type: "function", functionName: "seekSmallBackward" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.seekSmallForward",
    bindings: [{ key: "l" }],
    description: "Seek forward (small interval)",
    category: "video.playback",
    action: { type: "function", functionName: "seekSmallForward" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.seekMediumBackward",
    bindings: [],
    description: "Seek backward (medium interval)",
    category: "video.playback",
    action: { type: "function", functionName: "seekMediumBackward" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.seekMediumForward",
    bindings: [],
    description: "Seek forward (medium interval)",
    category: "video.playback",
    action: { type: "function", functionName: "seekMediumForward" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.seekLongBackward",
    bindings: [{ key: "j", modifiers: { ctrl: true, shift: true } }],
    description: "Seek backward (long interval)",
    category: "video.playback",
    action: { type: "function", functionName: "seekLongBackward" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.seekLongForward",
    bindings: [{ key: "l", modifiers: { ctrl: true, shift: true } }],
    description: "Seek forward (long interval)",
    category: "video.playback",
    action: { type: "function", functionName: "seekLongForward" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.frameSmallBackward",
    bindings: [{ key: "," }],
    description: "Step backward (small frame count)",
    category: "video.playback",
    action: { type: "function", functionName: "frameSmallBackward" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.frameSmallForward",
    bindings: [{ key: "." }],
    description: "Step forward (small frame count)",
    category: "video.playback",
    action: { type: "function", functionName: "frameSmallForward" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.frameMediumBackward",
    bindings: [{ key: ",", modifiers: { shift: true } }, { key: ";" }],
    description: "Step backward (medium frame count)",
    category: "video.playback",
    action: { type: "function", functionName: "frameMediumBackward" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.frameMediumForward",
    bindings: [{ key: ".", modifiers: { shift: true } }, { key: ":" }],
    description: "Step forward (medium frame count)",
    category: "video.playback",
    action: { type: "function", functionName: "frameMediumForward" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.frameLongBackward",
    bindings: [{ key: ";", modifiers: { ctrl: true, shift: true } }],
    description: "Step backward (long frame count)",
    category: "video.playback",
    action: { type: "function", functionName: "frameLongBackward" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.frameLongForward",
    bindings: [{ key: ":", modifiers: { ctrl: true, shift: true } }],
    description: "Step forward (long frame count)",
    category: "video.playback",
    action: { type: "function", functionName: "frameLongForward" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.playFromMarker",
    bindings: [{ key: "Enter" }],
    description: "Start playback from current marker",
    category: "video.playback",
    action: { type: "function", functionName: "playFromMarker" },
    enabled: true,
    editable: true,
  },

  // Video Jump Navigation
  {
    id: "video.jumpToMarkerStart",
    bindings: [{ key: "i" }],
    description: "Jump to start of current marker",
    category: "video.jump",
    action: { type: "function", functionName: "jumpToMarkerStart" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.jumpToSceneStart",
    bindings: [{ key: "i", modifiers: { shift: true } }],
    description: "Jump to beginning of scene",
    category: "video.jump",
    action: { type: "function", functionName: "jumpToSceneStart" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.jumpToMarkerEnd",
    bindings: [{ key: "o" }],
    description: "Jump to end of current marker",
    category: "video.jump",
    action: { type: "function", functionName: "jumpToMarkerEnd" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.jumpToSceneEnd",
    bindings: [{ key: "o", modifiers: { shift: true } }],
    description: "Jump to end of scene",
    category: "video.jump",
    action: { type: "function", functionName: "jumpToSceneEnd" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.jumpToPreviousShot",
    bindings: [{ key: "y" }],
    description: "Jump to previous shot",
    category: "video.jump",
    action: { type: "function", functionName: "jumpToPreviousShot" },
    enabled: true,
    editable: true,
  },
  {
    id: "video.jumpToNextShot",
    bindings: [{ key: "u" }],
    description: "Jump to next shot",
    category: "video.jump",
    action: { type: "function", functionName: "jumpToNextShot" },
    enabled: true,
    editable: true,
  },

  // System Actions

  // Non-editable Shortcuts
  {
    id: "system.escape",
    bindings: [{ key: "Escape" }],
    description: "Cancel edit/creation mode",
    category: "system",
    action: { type: "function", functionName: "handleEscape" },
    enabled: true,
    editable: false,
  },
  {
    id: "modal.confirm",
    bindings: [{ key: "Enter" }],
    description: "Confirm modal action",
    category: "system",
    action: { type: "function", functionName: "confirmModal" },
    enabled: true,
    editable: false,
  },
  {
    id: "modal.cancel",
    bindings: [{ key: "Escape" }],
    description: "Cancel modal action",
    category: "system",
    action: { type: "function", functionName: "cancelModal" },
    enabled: true,
    editable: false,
  },
];

// Helper function to create key combination string for lookups
export function createKeyCombo(
  key: string,
  modifiers?: { ctrl?: boolean; alt?: boolean; shift?: boolean; meta?: boolean }
): string {
  const mod = modifiers || {};
  const parts: string[] = [];

  if (mod.ctrl) parts.push("ctrl");
  if (mod.alt) parts.push("alt");
  if (mod.shift) parts.push("shift");
  if (mod.meta) parts.push("meta");

  parts.push(key.toLowerCase());

  return parts.join("+");
}
